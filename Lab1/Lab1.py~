import threading
import thread
import multiprocessing as mp
import random
import math
import time


def merge(*args):
    left, right = args[0] if len(args) == 1 else args
    left_length, right_length = len(left), len(right)
    left_index, right_index = 0, 0
    merged = []
    while left_index < left_length and right_index < right_length:
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1
    if left_index == left_length:
        merged.extend(right[right_index:])
    else:
        merged.extend(left[left_index:])
    return merged

def merge_sort(data):
    length = len(data)
    if length <= 1:
        return data
    middle = length / 2
    left = merge_sort(data[:middle])
    right = merge_sort(data[middle:])
    return merge(left, right)


def merge_sort_process(data, k):
    pool = mp.Pool(k)
    size = int(math.ceil(float(len(data))/k))
    data = [data[i * size:(i + 1) * size] for i in range(k)]
    data = pool.map(merge_sort, data)
    while len(data) > 1:
        extra = data.pop() if len(data) % 2 == 1 else None
        data = [(data[i], data[i + 1]) for i in range(0, len(data), 2)]
        data = pool.map(merge, data) + ([extra] if extra else [])
    return data[0]
    


def merge_sort_thread(data, k):
    threads = []
    newData = []
    size = int(math.ceil(float(len(data))/k))
    data = [data[i * size:(i + 1) * size] for i in range(k)]
    for i in range(size):
        thread = ThreadWithReturnValue(target=merge_sort, args= data[i])
        thread.start()
        threads.append(thread)
   for thread in threads:
       newData.append(thread.join())
       merge(newData)
    return newData
        
        
        
        
    

if __name__ == "__main__":
    n = input("Size of vector:")
    k = input("Number of initial chunks:")
    vector_unsorted = [random.randint(0,n) for _ in range(n)]
    print("Unsorted vector ", vector_unsorted)
    for sort in merge_sort_process, merge_sort_thread:
        start = time.time()
        vector_sorted = sort(vector_unsorted, k)
        end = time.time() - start
        print("Sorted vector and time:")
        print vector_sorted, end
